datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  files         File[]          // 添加这一行，建立与 File 的关系
  resumeAnalyses ResumeAnalysis[]

  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model File {
  id          String   @id @default(cuid())  // 改为 String 类型，与 User.id 保持一致
  filename    String   // 文件名
  originalName String  // 原始文件名
  path        String   // 存储路径
  mimetype    String   // 文件类型
  size        Int      // 文件大小（字节）
  extension   String?  // 文件扩展名
  isPublic    Boolean  @default(false) // 是否公开访问
  uploadedAt  DateTime @default(now()) // 上传时间
  updatedAt   DateTime @updatedAt      // 更新时间
  
  // 关联到上传用户 - 修改为 String 类型
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  
  // 可选：添加其他元数据字段
  description String?  // 文件描述
  tags        String?  // 标签，可以用逗号分隔
  resumeAnalyses ResumeAnalysis[]

  
  // 索引
  @@index([userId])
  @@map("files") // 表名映射
}


model ResumeAnalysis {
  id            String   @id @default(cuid())
  userId        String
  fileId        String?
  fileName      String
  analysisType  String   // "basic" 或 "detailed"
  
  // 使用JSON字段存储分析结果
  result        Json     // 存储完整的分析结果
  
  // 职位信息 (仅用于详细分析)
  jobTitle      String?
  company       String?
  location      String?
  description   String?  @db.Text
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // 关联
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  file          File?    @relation(fields: [fileId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([fileId])
  @@map("resume_analyses")
}
