// src/lib/api/resume.js

/**
 * Fetches a resume by its ID
 * @param {string} resumeId - The ID of the resume to fetch
 * @returns {Promise<Object>} - The resume data
 */
export async function getResumeById(resumeId) {
  try {
    // In a real implementation, this would be an API call
    // For now, we'll simulate a delay and return mock data
    await new Promise((resolve) => setTimeout(resolve, 1000));

    return {
      id: resumeId,
      fileName: "john_doe_resume.pdf",
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      content: {
        header: {
          name: "John Doe",
          contact: "email@example.com | (123) 456-7890",
        },
        summary: "Sales professional with experience in team management.",
        experience: [
          {
            title: "Sales Manager",
            company: "XYZ Company",
            date: "Jan 2020 - Present",
            description:
              "Managed a team and improved sales performance. Responsible for client relationships and reporting to senior management.",
          },
        ],
        skills: ["Microsoft Office", "Communication"],
        education: ["Bachelor's Degree in Business"],
      },
      score: {
        overall: 65,
        content: 60,
        keywords: 55,
        format: 70,
        atsCompatibility: 75,
      },
      analysis: {
        strengths: [
          "Clear job titles",
          "Chronological format",
          "Contact information present",
        ],
        weaknesses: [
          "Missing quantifiable achievements",
          "Limited skills section",
          "No professional summary",
        ],
        keywordMatches: [
          { text: "sales", count: 2, relevant: true },
          { text: "manager", count: 1, relevant: true },
          { text: "team", count: 1, relevant: true },
        ],
      },
    };
  } catch (error) {
    console.error("Error fetching resume:", error);
    throw new Error("Failed to fetch resume data");
  }
}

/**
 * Generates optimization suggestions for a resume
 * @param {string} resumeId - The ID of the resume to optimize
 * @param {Object} options - Optional parameters for customization
 * @returns {Promise<Object>} - The optimization suggestions
 */
export async function optimizeResume(resumeId, options = {}) {
  try {
    // In a real implementation, this would be an API call to an AI service
    // For now, we'll simulate a delay and return mock suggestions
    await new Promise((resolve) => setTimeout(resolve, 1500));

    // If job description is provided, we could tailor suggestions
    const { jobDescription, targetRole, preferences } = options;

    // Basic suggestions that would be generated by default
    const suggestions = {
      content: [
        {
          title: "Add a professional summary",
          description:
            "Include a concise overview of your experience, skills, and career goals",
          example: {
            before: "Sales professional with experience in team management.",
            after:
              "Results-driven Sales Manager with 5+ years of experience leading high-performing teams and exceeding revenue targets in the SaaS industry. Proven track record in client relationship management, data analysis, and implementing effective sales strategies.",
          },
        },
        {
          title: "Quantify your achievements",
          description:
            "Add specific numbers and metrics to demonstrate your impact",
          example: {
            before: "Managed a team and improved sales performance.",
            after:
              "Managed a team of 12 sales representatives, increasing quarterly sales by 27% and reducing customer churn by 15%.",
          },
        },
        {
          title: "Use action verbs",
          description:
            "Start bullet points with strong action verbs to convey leadership and initiative",
          example: {
            before: "Responsible for client relationships and reporting.",
            after:
              "Cultivated strong client relationships and delivered comprehensive performance reports to senior management.",
          },
        },
      ],
      keywords: [
        {
          title: "Add industry-specific keywords",
          description:
            "Include terms commonly used in job descriptions for your target role",
          keywords: [
            { text: "CRM", found: false, count: 0 },
            { text: "Salesforce", found: false, count: 0 },
            { text: "Revenue", found: false, count: 0 },
            { text: "Team Leadership", found: false, count: 0 },
            { text: "Client Relationship", found: true, count: 1 },
            { text: "Sales", found: true, count: 2 },
          ],
        },
        {
          title: "Incorporate technical skills",
          description:
            "Mention specific tools and technologies relevant to your field",
          example: {
            before: "Microsoft Office, Communication",
            after:
              "Microsoft Office Suite, CRM Systems (Salesforce, HubSpot), Data Analysis, Project Management, Team Leadership",
          },
        },
      ],
      format: [
        {
          title: "Improve section headings",
          description:
            "Use consistent formatting for section headers to improve readability",
          example: {
            before: "EXPERIENCE\nSales Manager, XYZ Company",
            after: "EXPERIENCE\n-----------------\nSales Manager, XYZ Company",
          },
        },
        {
          title: "Use bullet points for achievements",
          description:
            "Replace paragraph text with bullet points to highlight accomplishments",
          example: {
            before:
              "Managed a team and improved sales performance. Responsible for client relationships and reporting to senior management.",
            after:
              "• Managed a team of 12 sales representatives\n• Improved quarterly sales by 27%\n• Maintained client relationships and delivered reports to management",
          },
        },
        {
          title: "Standardize date formats",
          description: "Use consistent date formatting throughout your resume",
          example: {
            before: "Jan 2020 - Present",
            after: "January 2020 - Present",
          },
        },
      ],
      custom: [],
    };

    // If job description is provided, add custom suggestions
    if (jobDescription) {
      suggestions.custom.push({
        title: "Tailor resume to job description",
        description: `Customize your resume to match keywords from the job posting: "${jobDescription.substring(
          0,
          100
        )}..."`,
        example: {
          before: "Sales Manager with team management experience",
          after:
            "Strategic Sales Manager with proven experience in team leadership and revenue growth",
        },
      });
    }

    // If target role is provided, add role-specific suggestions
    if (targetRole) {
      suggestions.custom.push({
        title: `Optimize for ${targetRole} role`,
        description:
          "Highlight specific skills and experiences relevant to this position",
        example: {
          before: "Managed sales team and client relationships",
          after:
            "Led high-performing sales team, resulting in 30% revenue growth and strengthened enterprise client partnerships",
        },
      });
    }

    // If specific preferences are provided, add customized suggestions
    if (preferences) {
      if (preferences.focusOnATS) {
        suggestions.custom.push({
          title: "Optimize for ATS compatibility",
          description:
            "Ensure your resume can be properly parsed by Applicant Tracking Systems",
          example: {
            before: "Complex table layout with graphics and headers",
            after:
              "Clean, simple format with standard section headings and no tables or graphics",
          },
        });
      }

      if (preferences.customFocus) {
        suggestions.custom.push({
          title: `Emphasize ${preferences.customFocus}`,
          description: `Highlight your ${preferences.customFocus} throughout your resume`,
          example: {
            before: "General description of responsibilities",
            after: `Detailed examples of ${preferences.customFocus} with measurable outcomes`,
          },
        });
      }
    }

    return suggestions;
  } catch (error) {
    console.error("Error generating optimization suggestions:", error);
    throw new Error("Failed to generate optimization suggestions");
  }
}

/**
 * Applies selected optimizations to a resume
 * @param {string} resumeId - The ID of the resume to optimize
 * @param {Object} suggestions - The selected optimization suggestions
 * @param {Object} options - Optional parameters for customization
 * @returns {Promise<Object>} - The optimized resume data
 */
export async function applyOptimizations(resumeId, suggestions, options = {}) {
  try {
    // In a real implementation, this would be an API call to apply the changes
    // For now, we'll simulate a delay and return an updated resume
    await new Promise((resolve) => setTimeout(resolve, 2000));

    // Get the original resume data
    const originalResume = await getResumeById(resumeId);

    // Create a deep copy of the original resume
    const optimizedResume = JSON.parse(JSON.stringify(originalResume));

    // Update the resume content based on the selected suggestions
    // In a real implementation, this would be done by the backend

    // For demonstration purposes, we'll just update the score
    optimizedResume.score = {
      overall: Math.min(100, originalResume.score.overall + 20),
      content: Math.min(100, originalResume.score.content + 25),
      keywords: Math.min(100, originalResume.score.keywords + 30),
      format: Math.min(100, originalResume.score.format + 15),
      atsCompatibility: Math.min(
        100,
        originalResume.score.atsCompatibility + 20
      ),
    };

    // Update the content with optimized versions
    optimizedResume.content = {
      header: {
        name: "John Doe",
        contact: "email@example.com | (123) 456-7890 | linkedin.com/in/johndoe",
      },
      summary:
        "Results-driven Sales Manager with 5+ years of experience leading high-performing teams and exceeding revenue targets in the SaaS industry. Proven track record in client relationship management, data analysis, and implementing effective sales strategies.",
      experience: [
        {
          title: "Sales Manager",
          company: "XYZ Company",
          date: "January 2020 - Present",
          description:
            "• Managed a team of 12 sales representatives, increasing quarterly sales by 27% and reducing customer churn by 15%\n• Implemented data analysis processes that improved lead qualification efficiency by 35%\n• Developed and executed strategic sales plans that resulted in $2.3M in new business\n• Cultivated strong client relationships and delivered comprehensive performance reports to senior management",
        },
      ],
      skills: [
        "Microsoft Office Suite",
        "CRM Systems (Salesforce, HubSpot)",
        "Data Analysis",
        "Project Management",
        "Team Leadership",
        "Client Relationship Management",
        "Sales Forecasting",
        "Agile Methodology",
      ],
      education: [
        "Bachelor's Degree in Business Administration, University of Michigan, 2015",
        "Certified Sales Professional (CSP), Sales Leadership Council, 2021",
        "HubSpot Sales Certification, HubSpot Academy, 2022",
      ],
    };

    // Add optimization metadata
    optimizedResume.optimization = {
      appliedAt: new Date().toISOString(),
      suggestions: {
        total: Object.values(suggestions).flat().length,
        content: suggestions.content.length,
        keywords: suggestions.keywords.length,
        format: suggestions.format.length,
        custom: suggestions.custom.length,
      },
      options: options,
    };

    return optimizedResume;
  } catch (error) {
    console.error("Error applying optimizations:", error);
    throw new Error("Failed to apply optimizations to resume");
  }
}
